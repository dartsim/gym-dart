# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

pool:
  vmImage: 'ubuntu-latest'
strategy:
  matrix:
    Python35:
      python.version: '3.5'
    Python36:
      python.version: '3.6'
    Python37:
      python.version: '3.7'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
  displayName: 'Use Python $(python.version)'

- script: |
    # DART required dependencies
    sudo apt-get install build-essential cmake pkg-config git
    sudo apt-get install libeigen3-dev libassimp-dev libccd-dev libfcl-dev libboost-regex-dev libboost-system-dev
    sudo apt-get install libtinyxml2-dev liburdfdom-dev
    sudo apt-get install libxi-dev libxmu-dev freeglut3-dev libopenscenegraph-dev
    # DART optional dependencies
    sudo apt-get install libbullet-dev libode-dev liboctomap-dev
    if [ $(lsb_release -sc) = "xenial" ]; then
      sudo apt-get install libnlopt-dev
    elif [ $(lsb_release -sc) = "bionic" ]; then
      sudo apt-get install libnlopt-dev
    elif [ $(lsb_release -sc) = "cosmic" ]; then
      sudo apt-get install libnlopt-cxx-dev
    elif [ $(lsb_release -sc) = "disco" ]; then
      sudo apt-get install libnlopt-cxx-dev
    elif [ $(lsb_release -sc) = "eoan" ]; then
      sudo apt-get install libnlopt-cxx-dev
    else
      echo -e "$(lsb_release -sc) is not supported."
      exit 1
    fi
    python -m pip install --upgrade pip
    pip install -r requirements.txt
  displayName: 'Install dependencies'

- script: |
    pip install pytest pytest-azurepipelines
    pytest
  displayName: 'pytest'
